/* Adding two linked lists 
list size matter in this one because node number is unique to the list the last node is the least significant digit

*/

//poor performance solution that needs some work
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        stack<int> s1, s2;
        while(l1){
            s1.push(l1->val);
            l1=l1->next;
        }
        while(l2){
            s2.push(l2->val);
            l2=l2->next;
        }
        ListNode list(0);
        ListNode* l = &list;
        int carry = 0;
        vector<int> digits;
        int n = s1.size();
        int m = s2.size();
        while(!s1.empty() || !s2.empty()){
            if(m && n){
                int sum = s1.top() + s2.top() + carry;
                carry = sum/10;
                sum%=10;
                digits.push_back(sum);
                s1.pop();
                s2.pop();
                --m;
                --n;
            }else if(n){
                int sum = s1.top() + carry;
                carry = sum/10;
                sum%=10;
                digits.push_back(sum);
                s1.pop();
                --n;
            }else if(m){
                int sum = s2.top() + carry;
                carry = sum/10;
                sum%=10;
                digits.push_back(sum);
                s2.pop();
                --m;
            }
        }
        
        if(carry == 1) 
            digits.push_back(1);
        
        while(digits.size()!=0){
            l->next = new ListNode(digits.back());
            l=l->next;
            digits.pop_back();
        }
        return list.next;
    }
};
